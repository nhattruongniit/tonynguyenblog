---
import '../styles/base.css';
import '../styles/global.css';

interface Props {
	title?: string | undefined;
	description?: string | undefined;
	image?: string | undefined;
	url?: string | undefined;
}

const {
	title = 'Mentor Ultimate React Tony',
	description = 'The portfolio site of Mentor Ultimate React Tony',
	image = 'https://www.tonynguyen.me/assets/portrait.webp',
	url = 'https://www.tonynguyen.me/'
} = Astro.props;
---

<meta charset="UTF-8" />
<meta name="description" property="og:description" content={description} />
<meta name="viewport" content="width=device-width" />
<meta name="generator" content={Astro.generator} />
<title>{title}</title>

<!-- Facebook Open Graph meta tags -->
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={image} />
<meta property="og:url" content={url} />
<meta property="og:site_name" content={title}>
<meta property="og:type" content="website" />
<meta property="og:country_name" content="Viá»‡t Nam">
<meta property="og:locale" content="en_US">

<link rel="icon" type="image/svg+xml" href="/assets/logo.webp" />
<link rel="icon" type="image/png" href="/assets/logo.webp" />
<link rel="apple-touch-icon" href="/assets/logo.webp" />

<link rel="manifest" href="/manifest.json" />

<meta name="theme-color" content="#ffffff" />
<meta name="msapplication-TileColor" content="#ffffff" />
<meta name="msapplication-TileImage" content="/assets/logo.webp" />
<meta name="mobile-web-app-capable" content="yes" />
<meta name="apple-mobile-web-app-capable" content="yes" />
<meta name="apple-mobile-web-app-status-bar-style" content="default" />
<meta name="application-name" content="Mentor Ultimate React Tony" />
<meta name="apple-mobile-web-app-title" content="Mentor Ultimate React Tony" />
<meta name="msapplication-tooltip" content="Mentor Ultimate React Tony" />
<meta name="msapplication-starturl" content="/" />
<meta name="msapplication-navbutton-color" content="#ffffff" />

<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:title" content={title} />
<meta name="twitter:description" content="Mentor Ultimate React Tony" />
<meta name="twitter:image" content={image} />
<meta name="twitter:site" content="Mentor Ultimate React Tony" />
<meta name="twitter:creator" content="Mentor Ultimate React Tony" />
<meta name="twitter:domain" content="https://www.tonynguyen.me" />
<meta name="twitter:url" content={url} />
<meta name="twitter:app:name:iphone" content="Mentor Ultimate React Tony" />
<meta name="twitter:app:name:ipad" content="Mentor Ultimate React Tony" />
<meta name="twitter:app:name:googleplay" content="Mentor Ultimate React Tony" />

<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link
	href="https://fonts.googleapis.com/css2?family=Public+Sans:ital,wght@0,400;0,700;1,400&family=Rubik:wght@500;600&display=swap"
	rel="stylesheet"
/>
<script is:inline>
	// This code is inlined in the head to make dark mode instant & blocking.
	const getThemePreference = () => {
		if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
			return localStorage.getItem('theme');
		}
		return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
	};
	const isDark = getThemePreference() === 'dark';
	document.documentElement.classList[isDark ? 'add' : 'remove']('theme-dark');

	if (typeof localStorage !== 'undefined') {
		// Watch the document element and persist user preference when it changes.
		const observer = new MutationObserver(() => {
			const isDark = document.documentElement.classList.contains('theme-dark');
			localStorage.setItem('theme', isDark ? 'dark' : 'light');
		});
		observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
	}
</script>
